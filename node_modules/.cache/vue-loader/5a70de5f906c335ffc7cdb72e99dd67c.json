{"remainingRequest":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\src\\views\\TravelPlan.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\src\\views\\TravelPlan.vue","mtime":1640086098962},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\css-loader\\dist\\cjs.js","mtime":1637922544066},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1637922548447},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\postcss-loader\\src\\index.js","mtime":1637922545893},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637922542348},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\index.js","mtime":1637922546721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLnRyYXZlbC1wbGFuLWJ0bnMgew0KICBwYWRkaW5nOiAxNXB4Ow0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHJpZ2h0OiAwJTsNCiAgdG9wOiAwJTsNCiAgei1pbmRleDogOTk5Ow0KfQ0KLnNwYW5QIHsNCiAgZGlzcGxheTogYmxvY2s7DQogIGZvbnQtc2l6ZTogMTZweDsNCiAgLyogcGFkZGluZy1ib3R0b206IDE1cHg7ICovDQp9DQoubWFpbmNhc2NhZGVyIC5lbC1pbnB1dCBpbnB1dCB7DQogIHdpZHRoOiAzMDBweDsNCiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7DQogIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwOw0KfQ0KLnRyYW5QbGFuQnRuIHsNCiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDsNCiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDsNCiAgYm9yZGVyLWxlZnQ6IG5vbmU7DQp9DQoub3BlUGFuZWwgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHJpZ2h0OiAxNXB4Ow0KICB0b3A6IDU1cHg7DQogIHotaW5kZXg6IDk5OTsNCiAgcGFkZGluZzogMTVweDsNCiAgd2lkdGg6IDMwJTsNCiAgaGVpZ2h0OiA4NXZoOw0KICBvdmVyZmxvdzogYXV0bzsNCiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7DQp9DQoNCi5vcGV0aXRsZSB7DQogIG1hcmdpbjogMDsNCiAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCg0KLyogLmZvdXJ0ZXh0IHsNCiAgbWFyZ2luLXJpZ2h0OiAxMHB4Ow0KfSAqLw0KI3BhbmVsIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICBsZWZ0OiAxNzVweDsNCiAgLyogYm9yZGVyOiAxcHggc29saWQgc2lsdmVyOyAqLw0KfQ0KI3BhbmVsIC5hbWFwLWNhbGwgew0KICBkaXNwbGF5OiBub25lOw0KfQ0KLyogI3BhbmVsIC5hbWFwLWxpYi1kcml2aW5nIHsNCiAgYm9yZGVyOiBub25lOw0KfSAqLw0K"},{"version":3,"sources":["TravelPlan.vue"],"names":[],"mappingsqnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TravelPlan.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <!-- 出行规划 -->\r\n  <div class=\"travel-plan\">\r\n    <!-- <div class=\"travel-plan-top\">\r\n      <MainTop>我要旅行 <span class=\"gang\"> / </span> 出行规划</MainTop>\r\n    </div> -->\r\n\r\n    <div class=\"opePanel\" v-if=\"mainType.length !== 0\" v-show=\"opePanel\">\r\n      <p class=\"opetitle\">出行规划查看面板</p>\r\n      <el-divider><span>遗产简介</span></el-divider>\r\n      <span>景区类型：</span>\r\n      <span class=\"greyText\">{{ mainType[0] }}</span>\r\n      <br />\r\n      <span>景区名称：</span>\r\n\r\n      <span class=\"greyText\">{{ mainType[1].name }}</span>\r\n      <br />\r\n      <span>景区地址：</span>\r\n      <span class=\"greyText\">{{ mainType[1].address }}</span>\r\n      <br />\r\n      <span>所属公司：</span>\r\n      <span class=\"greyText\">{{ mainType[1].company }}</span>\r\n      <br />\r\n      <span>始建年限：</span>\r\n      <span class=\"greyText\">{{ mainType[1].start }}</span>\r\n      <br />\r\n      <span>景区类型：</span>\r\n      <span class=\"greyText\">{{ mainType[1].type }}</span>\r\n      <br />\r\n      <span>详细地址：</span>\r\n      <span class=\"greyText\">{{ geocoderText }}</span>\r\n      <el-divider><span>天气预报</span></el-divider>\r\n      <span>城市/区：</span>\r\n      <span class=\"greyText\">{{ todayWeather.city }}</span>\r\n      <br />\r\n      <span>天气：</span>\r\n      <span class=\"greyText\">{{ todayWeather.weather }}</span>\r\n      <br />\r\n      <span>温度：</span>\r\n      <span class=\"greyText\">{{ todayWeather.temperature }}</span>\r\n      <br />\r\n      <span>风向：</span>\r\n      <span class=\"greyText\">{{ todayWeather.windDirection }}</span>\r\n      <br />\r\n      <span>风力：</span>\r\n      <span class=\"greyText\">{{ todayWeather.windPower }}</span>\r\n      <br />\r\n      <span>空气湿度：</span>\r\n      <span class=\"greyText\">{{ todayWeather.humidity }}</span>\r\n      <br />\r\n      <span>发布时间：</span>\r\n      <span class=\"greyText\">{{ todayWeather.reportTime }}</span>\r\n      <br />\r\n      <br />\r\n      <el-button\r\n        type=\"primary\"\r\n        size=\"mini\"\r\n        @click=\"isfourDayWeather = true\"\r\n        v-if=\"!isfourDayWeather\"\r\n        >查看未来4天天气预报</el-button\r\n      >\r\n      <el-button\r\n        type=\"primary\"\r\n        size=\"mini\"\r\n        @click=\"isfourDayWeather = false\"\r\n        v-else\r\n        >关闭未来4天天气预报</el-button\r\n      >\r\n      <br />\r\n\r\n      <div v-if=\"fourDayWeatherList.length && isfourDayWeather\">\r\n        <br />\r\n        <div\r\n          class=\"weatherList\"\r\n          v-for=\"(ele, index) in fourDayWeatherList\"\r\n          :key=\"index\"\r\n        >\r\n          <span class=\"fourtext\">日期：{{ ele.date }} | </span>\r\n          <span class=\"fourtext\">天气：{{ ele.dayWeather }} | </span>\r\n          <span class=\"fourtext\"\r\n            >气温：{{ ele.nightTemp }} ~ {{ ele.dayTemp }}℃</span\r\n          >\r\n        </div>\r\n      </div>\r\n      <el-divider><span>规划推荐线路</span></el-divider>\r\n      <el-radio v-model=\"radio\" label=\"LEAST_TIME\">最快捷</el-radio>\r\n      <el-radio v-model=\"radio\" label=\"LEAST_FEE\">最经济</el-radio>\r\n      <el-radio v-model=\"radio\" label=\"LEAST_DISTANCE\">最短距离</el-radio>\r\n      <el-radio v-model=\"radio\" label=\"REAL_TRAFFIC\">考虑实时路况</el-radio>\r\n      <br />\r\n      <br />\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"getDrvie\"\r\n        >查看推荐线路</el-button\r\n      >\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"clearDrvie\" v-if=\"driving\"\r\n        >清空线路</el-button\r\n      >\r\n      <el-divider>\r\n        <span class=\"fourtext\">查看周边：</span><span>吃喝玩乐</span>\r\n      </el-divider>\r\n\r\n      <el-autocomplete\r\n        class=\"inline-input\"\r\n        v-model=\"periphery\"\r\n        :fetch-suggestions=\"querySearch\"\r\n        placeholder=\"请输入想要查询的周边内容\"\r\n        size=\"mini\"\r\n      ></el-autocomplete>\r\n      <br />\r\n      <div>\r\n        <br />\r\n        <span>查询范围</span><br />\r\n        <el-radio v-model=\"perRange\" :label=\"1000\">1千米</el-radio>\r\n        <el-radio v-model=\"perRange\" :label=\"2000\">2千米</el-radio>\r\n        <el-radio v-model=\"perRange\" :label=\"3000\">3千米</el-radio>\r\n        <el-radio v-model=\"perRange\" :label=\"5000\">5千米</el-radio>\r\n        <br />\r\n        <br />\r\n      </div>\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"getperiphery\"\r\n        >查找</el-button\r\n      >\r\n      <el-button\r\n        type=\"primary\"\r\n        size=\"mini\"\r\n        @click=\"clearperiphery\"\r\n        v-if=\"placeSearch\"\r\n        >清空查找结果</el-button\r\n      >\r\n      <el-divider>\r\n        <span class=\"fourtext\">预算评估</span>\r\n      </el-divider>\r\n      <el-button type=\"primary\" size=\"mini\" @click=\"moneyplan\"\r\n        >点击进行预算评估</el-button\r\n      >\r\n    </div>\r\n\r\n    <div class=\"travel-plan-bottom\">\r\n      <div class=\"travel-plan-btns\">\r\n        <el-cascader\r\n          class=\"maincascader\"\r\n          size=\"mini\"\r\n          v-model=\"mainType\"\r\n          :options=\"selOptions\"\r\n          @change=\"handleChange\"\r\n          placeholder=\"请选择出行目的地\"\r\n        ></el-cascader>\r\n        <el-button\r\n          class=\"tranPlanBtn\"\r\n          type=\"primary\"\r\n          size=\"mini\"\r\n          @click=\"openOpePanel\"\r\n          v-if=\"!opePanel\"\r\n          >进行规划</el-button\r\n        >\r\n        <el-button\r\n          v-else\r\n          class=\"tranPlanBtn\"\r\n          type=\"primary\"\r\n          size=\"mini\"\r\n          @click=\"opePanel = false\"\r\n          >关闭面板</el-button\r\n        >\r\n\r\n        <el-button size=\"mini\" @click=\"dialogVisible = true\"\r\n          >查看当前位置</el-button\r\n        >\r\n      </div>\r\n\r\n      <div id=\"container\" class=\"container\"></div>\r\n      <div id=\"panel\"></div>\r\n      <div id=\"place\"></div>\r\n    </div>\r\n\r\n    <el-dialog title=\"当前位置\" :visible.sync=\"dialogVisible\" width=\"45%\">\r\n      <span class=\"spanP\">当前坐标：{{ geolocationRes.position }}</span\r\n      ><br />\r\n      <span class=\"spanP\">定位类型：{{ geolocationRes.location_type }}</span\r\n      ><br />\r\n      <!-- <span class=\"spanP\">城市代码：{{ geolocationRes.addressComponent.city }}</span><br/>\r\n      <span class=\"spanP\">当前街道：{{ geolocationRes.addressComponent.street }}</span><br/> -->\r\n      <span class=\"spanP\">详细地址：{{ geolocationRes.formattedAddress }}</span\r\n      ><br />\r\n      <span class=\"spanP\"\r\n        >定位状态：<el-tag\r\n          v-if=\"geolocationRes.info === 'SUCCESS'\"\r\n          type=\"success\"\r\n          >定位正常</el-tag\r\n        ><el-tag v-else type=\"danger\">定位失败</el-tag></span\r\n      >\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"dialogVisible = false\"\r\n          >确 定</el-button\r\n        >\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/javascript\"\r\n    src=\"https://webapi.amap.com/maps?v=1.4.15&key=2eccb47b400c8ab58f2dc596dbfe9d53&plugin=AMap.MouseTool,AMap.Driving,AMap.DistrictSearch,AMap.Geocoder\"></script>\r\n<script>\r\nimport { mapState } from \"vuex\";\r\n\r\nexport default {\r\n  components: {},\r\n\r\n  data() {\r\n    return {\r\n      map: \"\",\r\n      district: null,\r\n      geolocation: null,\r\n      geolocationRes: {}, //定位结果\r\n      dialogVisible: false, //查看当前位置对话框\r\n\r\n      mainType: [],\r\n      selOptions: [\r\n        {\r\n          value: \"工业遗产\",\r\n          label: \"工业遗产\",\r\n          children: [],\r\n        },\r\n        {\r\n          value: \"工业博物馆\",\r\n          label: \"工业博物馆\",\r\n          children: [],\r\n        },\r\n        {\r\n          value: \"工业旅游区\",\r\n          label: \"工业旅游区\",\r\n          children: [],\r\n        },\r\n      ], //级联选择器数据\r\n\r\n      opePanel: false, //控制面板显示与隐藏\r\n      geocoder: null, //坐标解析实例\r\n      geocoderText: \"\", //解析结果\r\n      weatherPlace: \"\",\r\n      todayWeather: {},\r\n      isfourDayWeather: false,\r\n      fourDayWeatherList: [],\r\n\r\n      drivingOption: null, //出行线路\r\n      driving: null,\r\n      radio: \"LEAST_TIME\", //路线类型\r\n\r\n      periphery: \"\", //周边查询关键词\r\n      perRange: 1000, //查询范围\r\n      restaurants: [\r\n        {\r\n          value: \"宾馆\",\r\n        },\r\n        {\r\n          value: \"酒店\",\r\n        },\r\n        {\r\n          value: \"停车场\",\r\n        },\r\n        {\r\n          value: \"公园\",\r\n        },\r\n        {\r\n          value: \"超市\",\r\n        },\r\n        {\r\n          value: \"医院\",\r\n        },\r\n        {\r\n          value: \"学校\",\r\n        },\r\n      ],\r\n      placeSearch: null, //周边查询类\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState([\"lang\"]),\r\n  },\r\n\r\n  created() {\r\n    this.getOptions();\r\n  },\r\n  mounted() {\r\n    this.initMap();\r\n    this.drawBounds();\r\n  },\r\n  methods: {\r\n    initMap() {\r\n      //初始化地图\r\n      this.map = new AMap.Map(\"container\", {\r\n        resizeEnable: true,\r\n        // zoom: this.zoom, //级别\r\n        zooms: [6.5, 18],\r\n        // center: [115.464523, 38.874476], //中心点坐标\r\n        viewMode: \"3D\", //使用3D视图\r\n        lang: this.lang,\r\n        mapStyle: \"amap://styles/macaron\",\r\n        // infoWindow: null,\r\n      });\r\n\r\n      AMap.plugin(\"AMap.Geolocation\", () => {\r\n        // console.log(111);\r\n        // 注意这里由于函数嵌套需要使用箭头函数\r\n        this.geolocation = new AMap.Geolocation({\r\n          enableHighAccuracy: true, //是否使用高精度定位，默认:true\r\n          timeout: 10000, //超过10秒后停止定位，默认：5s\r\n          buttonPosition: \"RB\", //定位按钮的停靠位置\r\n          buttonOffset: new AMap.Pixel(10, 20), //定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)\r\n          zoomToAccuracy: true, //定位成功后是否自动调整地图视野到定位点\r\n        });\r\n        this.map.addControl(this.geolocation);\r\n        this.geolocation.getCurrentPosition((status, result) => {\r\n          if (status == \"complete\") {\r\n            // onComplete(result);\r\n            // console.log(\"定位结果\", result);\r\n            this.geolocationRes = result;\r\n            console.log(this.geolocationRes);\r\n          } else {\r\n            // onError(result);\r\n            this.$message.error(\r\n              \"定位失败，请检查浏览器权限。可以更换Eage浏览器进行定位。\"\r\n            );\r\n            console.log(\"定位结果\", result);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    // 裁剪边界\r\n    drawBounds() {\r\n      if (!this.district) {\r\n        //实例化DistrictSearch\r\n        var opts = {\r\n          subdistrict: 0, //获取边界不需要返回下级行政区\r\n          extensions: \"all\", //返回行政区边界坐标组等具体信息\r\n          level: \"province\", //查询行政级别为 市\r\n        };\r\n        this.district = new AMap.DistrictSearch(opts);\r\n      }\r\n      this.district.setLevel(\"province\");\r\n      var _this = this;\r\n      this.district.search(\"河北省\", function (status, result) {\r\n        // 河北省边界\r\n        // var bounds = result.districtList[0].boundaries;\r\n        // console.log(result);\r\n        // console.log(status);\r\n\r\n        var outer = [\r\n          new AMap.LngLat(-360, 90, true),\r\n          new AMap.LngLat(-360, -90, true),\r\n          new AMap.LngLat(360, -90, true),\r\n          new AMap.LngLat(360, 90, true),\r\n        ];\r\n        var holes = result.districtList[0].boundaries;\r\n\r\n        var pathArray = [outer];\r\n        pathArray.push.apply(pathArray, holes);\r\n        var polygon = new AMap.Polygon({\r\n          pathL: pathArray,\r\n          strokeColor: \"#F9D5A7\",\r\n          strokeWeight: 1,\r\n          fillColor: \"#F9D5A7\",\r\n          fillOpacity: 0.2,\r\n        });\r\n        polygon.setPath(pathArray);\r\n        _this.map.add(polygon);\r\n      });\r\n    },\r\n\r\n    // 初始化级联选择器数据\r\n    async getOptions() {\r\n      var res1 = await this.$axios.get(\r\n        \"/getHeritageMainData/getHeritageMainData\"\r\n      );\r\n      // console.log(\"工业遗产\", res1);\r\n      this.selOptions[0].children = res1.data.data.map((ele) => {\r\n        return {\r\n          value: ele,\r\n          label: ele.name,\r\n        };\r\n      });\r\n\r\n      var res2 = await this.$axios.get(\"/getHeritageMuseum/getHeritageMuseum\");\r\n      // console.log(\"工业bwguan\", res2);\r\n\r\n      this.selOptions[1].children = res2.data.data.map((ele) => {\r\n        return {\r\n          value: ele,\r\n          label: ele.name,\r\n        };\r\n      });\r\n\r\n      var res3 = await this.$axios.get(\r\n        \"/getHeritageTourism/getHeritageTourism\"\r\n      );\r\n\r\n      this.selOptions[2].children = res3.data.data.map((ele) => {\r\n        return {\r\n          value: ele,\r\n          label: ele.name,\r\n        };\r\n      });\r\n      console.log(\"all\", this.selOptions);\r\n    },\r\n\r\n    //选择了一级数据\r\n    handleChange(value) {\r\n      console.log(value);\r\n      this.opePanel = false;\r\n    },\r\n\r\n    //进行规划\r\n    openOpePanel() {\r\n      if (this.mainType.length !== 0) {\r\n        this.getHeritageAddress();\r\n        // this.getWeather();\r\n        this.opePanel = true;\r\n      } else {\r\n        this.$message({\r\n          message: \"请先选择出行目的地在进行旅行规划\",\r\n          type: \"warning\",\r\n        });\r\n      }\r\n    },\r\n\r\n    // 解析遗产坐标\r\n    getHeritageAddress() {\r\n      this.geocoder = new AMap.Geocoder({\r\n        // city: \"010\", //城市设为北京，默认：“全国”\r\n        radius: 1000, //范围，默认：500\r\n      });\r\n      this.geocoder.getAddress(\r\n        this.mainType[1].coordinate,\r\n        (status, result) => {\r\n          if (status === \"complete\" && result.regeocode) {\r\n            this.geocoderText = result.regeocode.formattedAddress;\r\n            var start = this.geocoderText.search(\"省\");\r\n            var end = this.geocoderText.search(\"市\");\r\n            // console.log(address);\r\n            // console.log(start, end, this.geocoderText);\r\n            // 获取市名\r\n            this.weatherPlace = this.geocoderText.slice(start + 1, end);\r\n\r\n            // 获取天气预报start\r\n            AMap.plugin(\"AMap.Weather\", () => {\r\n              var weather = new AMap.Weather();\r\n              //查询实时天气信息, 查询的城市到行政级别的城市，如朝阳区、杭州市\r\n              weather.getLive(this.weatherPlace, (err, data) => {\r\n                if (!err) {\r\n                  console.log(\"当天天气\", data);\r\n                  this.todayWeather = data;\r\n                }\r\n              });\r\n              //未来4天天气预报\r\n              weather.getForecast(this.weatherPlace, (err, data) => {\r\n                if (err) {\r\n                  return;\r\n                }\r\n\r\n                this.fourDayWeatherList = data.forecasts;\r\n                console.log(\"四天天气\", this.fourDayWeatherList);\r\n              });\r\n            });\r\n            // 获取天气预报end\r\n\r\n            // console.log(this.weatherPlace);\r\n          } else {\r\n            log.error(\"根据经纬度查询地址失败\");\r\n          }\r\n        }\r\n      );\r\n    },\r\n\r\n    // // 路线\r\n\r\n    getDrvie() {\r\n      console.log(111);\r\n      if (this.driving) {\r\n        this.driving.clear();\r\n      }\r\n\r\n      if (this.radio === \"LEAST_TIME\") {\r\n        this.drivingOption = {\r\n          policy: AMap.DrivingPolicy.LEAST_TIME, // 其它policy参数请参考 https://lbs.amap.com/api/javascript-api/reference/route-search#m_DrivingPolicy\r\n          ferry: 1, // 是否可以使用轮渡\r\n          province: \"冀\", // 车牌省份的汉字缩写\r\n          map: this.map,\r\n          panel: \"panel\",\r\n          autoFitView: true,\r\n        };\r\n      } else if (this.radio === \"LEAST_FEE\") {\r\n        this.drivingOption = {\r\n          policy: AMap.DrivingPolicy.LEAST_FEE, // 其它policy参数请参考 https://lbs.amap.com/api/javascript-api/reference/route-search#m_DrivingPolicy\r\n          ferry: 1, // 是否可以使用轮渡\r\n          province: \"冀\", // 车牌省份的汉字缩写\r\n          map: this.map,\r\n          panel: \"panel\",\r\n          autoFitView: true,\r\n        };\r\n      } else if (this.radio === \"LEAST_DISTANCE\") {\r\n        this.drivingOption = {\r\n          policy: AMap.DrivingPolicy.LEAST_DISTANCE, // 其它policy参数请参考 https://lbs.amap.com/api/javascript-api/reference/route-search#m_DrivingPolicy\r\n          ferry: 1, // 是否可以使用轮渡\r\n          province: \"冀\", // 车牌省份的汉字缩写\r\n          map: this.map,\r\n          panel: \"panel\",\r\n          autoFitView: true,\r\n        };\r\n      } else if (this.radio === \"REAL_TRAFFIC\") {\r\n        this.drivingOption = {\r\n          policy: AMap.DrivingPolicy.REAL_TRAFFIC, // 其它policy参数请参考 https://lbs.amap.com/api/javascript-api/reference/route-search#m_DrivingPolicy\r\n          ferry: 1, // 是否可以使用轮渡\r\n          province: \"冀\", // 车牌省份的汉字缩写\r\n          map: this.map,\r\n          panel: \"panel\",\r\n          autoFitView: true,\r\n        };\r\n      }\r\n\r\n      // 构造路线导航类\r\n      this.driving = new AMap.Driving(this.drivingOption);\r\n\r\n      // 根据起终点经纬度规划驾车导航路线\r\n      // console.log(\"当前位置\", this.geolocationRes.position);\r\n      // console.log(\"目标位置\", this.mainType);\r\n      this.driving.search(\r\n        [this.geolocationRes.position.R, this.geolocationRes.position.Q],\r\n        this.mainType[1].coordinate,\r\n        (status, result) => {\r\n          // result 即是对应的驾车导航信息，相关数据结构文档请参考  https://lbs.amap.com/api/javascript-api/reference/route-search#m_DrivingResult\r\n          if (status === \"complete\") {\r\n            this.$message({\r\n              message: \"绘制驾车路线完成\",\r\n              type: \"success\",\r\n            });\r\n\r\n            console.log(result);\r\n          } else {\r\n            this.$message.error(\"获取驾车数据失败：\");\r\n          }\r\n        }\r\n      );\r\n    },\r\n\r\n    // 清空规划的路线\r\n    clearDrvie() {\r\n      this.driving.clear();\r\n      this.driving = null;\r\n      this.$message({\r\n        message: \"驾车路线已清空\",\r\n        type: \"success\",\r\n      });\r\n    },\r\n\r\n    // 带有提示的输入框\r\n    querySearch(queryString, cb) {\r\n      var restaurants = this.restaurants;\r\n      var results = queryString\r\n        ? restaurants.filter(this.createFilter(queryString))\r\n        : restaurants;\r\n      // 调用 callback 返回建议列表的数据\r\n      cb(results);\r\n    },\r\n    createFilter(queryString) {\r\n      return (restaurant) => {\r\n        return (\r\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) ===\r\n          0\r\n        );\r\n      };\r\n    },\r\n    // end\r\n    // 查找周边\r\n    getperiphery() {\r\n      console.log(this.periphery);\r\n      console.log(this.perRange);\r\n      if (this.placeSearch) {\r\n        this.placeSearch.clear();\r\n        this.placeSearch = null;\r\n      }\r\n\r\n      if (this.periphery !== \"\") {\r\n        AMap.service([\"AMap.PlaceSearch\"], () => {\r\n          //构造地点查询类\r\n          this.placeSearch = new AMap.PlaceSearch({\r\n            type: this.periphery, // 兴趣点类别\r\n            pageSize: 20, // 单页显示结果条数\r\n            pageIndex: 1, // 页码\r\n\r\n            map: this.map, // 展现结果的地图实例\r\n            panel: \"place\", // 结果列表将在此容器中进行展示。\r\n            autoFitView: true, // 是否自动调整地图视野使绘制的 Marker点都处于视口的可见范围\r\n          });\r\n\r\n          var cpoint = this.mainType[1].coordinate; //中心点坐标\r\n          this.placeSearch.searchNearBy(\r\n            \"\",\r\n            cpoint,\r\n            this.perRange,\r\n            function (status, result) {}\r\n          );\r\n        });\r\n\r\n        this.opePanel = false;\r\n        this.$message({\r\n          message: \"为便于查看，出行规划面板已展示关闭，如需要再次打开即可。\",\r\n          type: \"warning\",\r\n        });\r\n      } else {\r\n        this.$message.error(\"请选择查询关键词\");\r\n      }\r\n    },\r\n    // 清空查找结果\r\n    clearperiphery() {\r\n      this.placeSearch.clear();\r\n      this.placeSearch = null;\r\n    },\r\n\r\n    // 跳转预算评估\r\n    moneyplan() {\r\n      console.log(\"moneyplan\");\r\n      this.$router.push({\r\n        path: \"/travel/money\",\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.travel-plan-btns {\r\n  padding: 15px;\r\n  position: absolute;\r\n  right: 0%;\r\n  top: 0%;\r\n  z-index: 999;\r\n}\r\n.spanP {\r\n  display: block;\r\n  font-size: 16px;\r\n  /* padding-bottom: 15px; */\r\n}\r\n.maincascader .el-input input {\r\n  width: 300px;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n}\r\n.tranPlanBtn {\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n  border-left: none;\r\n}\r\n.opePanel {\r\n  position: absolute;\r\n  right: 15px;\r\n  top: 55px;\r\n  z-index: 999;\r\n  padding: 15px;\r\n  width: 30%;\r\n  height: 85vh;\r\n  overflow: auto;\r\n  background-color: white;\r\n}\r\n\r\n.opetitle {\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n\r\n/* .fourtext {\r\n  margin-right: 10px;\r\n} */\r\n#panel {\r\n  position: absolute;\r\n  left: 175px;\r\n  /* border: 1px solid silver; */\r\n}\r\n#panel .amap-call {\r\n  display: none;\r\n}\r\n/* #panel .amap-lib-driving {\r\n  border: none;\r\n} */\r\n</style>"]}]}