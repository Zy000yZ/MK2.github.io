{"remainingRequest":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\src\\views\\Heritage\\ApplyHeritageMain.vue?vue&type=template&id=17da9d70&","dependencies":[{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\src\\views\\Heritage\\ApplyHeritageMain.vue","mtime":1639839989318},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637922542348},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1637922548678},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1637922542348},{"path":"D:\\a-my-html\\html-GIS\\git-develop\\vue-industry-gis\\node_modules\\vue-loader\\lib\\index.js","mtime":1637922546721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}